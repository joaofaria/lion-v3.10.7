{"version":3,"sources":["webpack:///./src/components/GuacamoleMonitor.vue","webpack:///src/components/GuacamoleMonitor.vue","webpack:///./src/components/GuacamoleMonitor.vue?99e9","webpack:///./src/components/GuacamoleMonitor.vue?7be8","webpack:///./src/components/GuacamoleMonitor.vue?93b0"],"names":["render","_vm","this","_c","_self","directives","name","rawName","value","loading","expression","attrs","loadingText","style","divStyle","staticRenderFns","pixelDensity","window","devicePixelRatio","data","displayWidth","displayHeight","resizing","computed","width","height","margin","mounted","methods","getAutoSize","getConnectString","Promise","getSupportedMimetypes","getSupportedGuacAudios","getSupportedGuacVideos","supportImages","connectString","supportAudios","supportVideos","resolve","getPropScale","updateDisplayScale","debounce","clearTimeout","timeout","onWindowResize","onClientConnected","setTimeout","displayResize","clientStateChanged","recorder","stream","requestAudioStream","display","clientOnErr","closeDisplay","msg","confirmButtonText","callback","connectGuacamole","tunnel","vm","client","component"],"mappings":"yHAAA,IAAIA,EAAS,WAAkB,IAAIC,EAAIC,KAAKC,EAAGF,EAAIG,MAAMD,GAAG,OAAOA,EAAG,UAAU,CAACA,EAAG,SAAS,CAACE,WAAW,CAAC,CAACC,KAAK,UAAUC,QAAQ,YAAYC,MAAOP,EAAIQ,QAASC,WAAW,YAAYC,MAAM,CAAC,uBAAuBV,EAAIW,YAAY,6BAA6B,sBAAsB,CAACT,EAAG,MAAM,CAACU,MAAOZ,EAAIa,UAAW,CAACX,EAAG,MAAM,CAACQ,MAAM,CAAC,GAAK,kBAAkB,IAEhWI,EAAkB,G,6FCiBtB,MAAMC,EAAeC,OAAOC,kBAAoB,EACjC,OACfZ,wBACAa,OACA,OACAC,eACAC,gBACAZ,WACAG,0CACAU,cAGAC,UACAT,oBACA,OACAU,6BACAC,+BACAC,mBAIAC,mBACA,yBACA,mBACA,6BACA,kCACA,mCACA,UACA,sBAGAC,SACAC,cACA,4BACA,uBACA,aAEAC,oBAEA,8BACA,OACA,2BACAC,aACAC,iBACAC,iBACAC,mBACA,SAEA,aACA,OACA,OACA,oBACA,qBACA,MACA,oCACA,6BACA,8BACA,2BACA,sCACAC,uBACAC,2CAEAC,uBACAD,2CAEAE,uBACAF,2CAEAG,UAIAC,eACA,iCACA,MACA,OAGA,iBACAvB,2CACAA,8CAEA,UAGAwB,qBACA,iCACA,MACA,OAGA,4BACA,iBAGA,aACA,sBACA,iCACA,qCAGAC,cACA,WACA,kBACA,UACAC,gBAEAC,oBAIAC,iBAEA,oBACA,2BAMAC,oBACA,sBACAC,gBACA9B,qFACA,MAGA+B,mBAEA,wCACA,4BACA,sBACA,sBACA,wBAGAC,sBACA,UAEA,OACA,wBACA,qCACA,MAGA,OACA,8BACA,2CACA,MAGA,OACA,uCACA,oDACA,MAGA,OACA,6BACA,2CACA,gBAMA,wCACA,gBAEA,+BACA,qCAIA,EAGAC,yBAHAC,aAKAC,eACA,yBACA,MAGA,OACA,OACA,iCACA,8CAEA,yCACAC,eACA,QAGAC,eACA,gBACA,sBAEAC,gBACA,iCACA,eACA,gBACAC,kEACA,mCACAC,gCACAC,aACA,2CACA,cAEAL,oBAKAM,sBACA,2CACA,6BACA,oBACA,OACAC,qBACAA,sBACAC,+BACAR,gBAEAO,qBACAC,sCACAD,UAEAA,0CACA,cACA,cACA,sCACA,yCACAP,2CACAS,wCACAA,2BACAA,aAEA7C,2BACA6C,mBClQ0V,I,wBCQtVC,EAAY,eACd,EACA/D,EACAe,GACA,EACA,KACA,WACA,MAIa,aAAAgD,E,2CCnBf,W","file":"assets/js/chunk-d8853b4e.c6562d9d.js","sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('el-main',[_c('el-row',{directives:[{name:\"loading\",rawName:\"v-loading\",value:(_vm.loading),expression:\"loading\"}],attrs:{\"element-loading-text\":_vm.loadingText,\"element-loading-background\":\"rgba(0, 0, 0, 0.8\"}},[_c('div',{style:(_vm.divStyle)},[_c('div',{attrs:{\"id\":\"display\"}})])])],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <el-main>\n    <el-row v-loading=\"loading\" :element-loading-text=\"loadingText\" element-loading-background=\"rgba(0, 0, 0, 0.8\">\n      <div :style=\"divStyle\">\n        <div id=\"display\" />\n      </div>\n    </el-row>\n  </el-main>\n</template>\n\n<script>\nimport Guacamole from 'guacamole-common-js'\nimport i18n from '@/i18n'\nimport { getMonitorConnectParams } from '@/utils/common'\nimport { getSupportedMimetypes } from '@/utils/image'\nimport { getSupportedGuacAudios } from '@/utils/audios'\nimport { getSupportedGuacVideos } from '@/utils/video'\nimport { ConvertGuacamoleError, ErrorStatusCodes } from '@/utils/status'\n\nconst pixelDensity = window.devicePixelRatio || 1\nexport default {\n  name: 'GuacamoleMonitor',\n  data() {\n    return {\n      displayWidth: 0,\n      displayHeight: 0,\n      loading: true,\n      loadingText: i18n.t('Connecting') + ' ...',\n      resizing: false\n    }\n  },\n  computed: {\n    divStyle: function() {\n      return {\n        width: this.displayWidth + 'px',\n        height: this.displayHeight + 'px',\n        margin: '0 auto'\n      }\n    }\n  },\n  mounted: function() {\n    const result = getMonitorConnectParams()\n    this.$log.debug(result)\n    const sid = result['data']['session']\n    this.getConnectString(sid).then(connectionParams => {\n      this.connectGuacamole(connectionParams, result['ws'])\n    }).catch(err => {\n      this.$log.debug(err)\n    })\n  },\n  methods: {\n    getAutoSize() {\n      const optimalWidth = window.innerWidth * pixelDensity\n      const optimalHeight = window.innerHeight * pixelDensity\n      return [optimalWidth, optimalHeight]\n    },\n    getConnectString(sessionId) {\n      // Calculate optimal width/height for display\n      const [optimalWidth, optimalHeight] = this.getAutoSize()\n      const optimalDpi = pixelDensity * 96\n      return new Promise((resolve, reject) => {\n        Promise.all([\n          getSupportedMimetypes(),\n          getSupportedGuacAudios(),\n          getSupportedGuacVideos()\n        ]).then(values => {\n          // [\"image/jpeg\", \"image/png\", \"image/webp\"]\n          const supportImages = values[0]\n          const supportAudios = values[1]\n          const supportVideos = values[2]\n          this.displayWidth = optimalWidth\n          this.displayHeight = optimalHeight\n          let connectString =\n              'SESSION_ID=' + encodeURIComponent(sessionId) +\n              '&GUAC_WIDTH=' + Math.floor(optimalWidth) +\n              '&GUAC_HEIGHT=' + Math.floor(optimalHeight) +\n              '&GUAC_DPI=' + Math.floor(optimalDpi)\n          this.$log.debug('Connect string: ', connectString)\n          supportImages.forEach(function(mimetype) {\n            connectString += '&GUAC_IMAGE=' + encodeURIComponent(mimetype)\n          })\n          supportAudios.forEach(function(mimetype) {\n            connectString += '&GUAC_AUDIO=' + encodeURIComponent(mimetype)\n          })\n          supportVideos.forEach(function(mimetype) {\n            connectString += '&GUAC_VIDEO=' + encodeURIComponent(mimetype)\n          })\n          resolve(connectString)\n        })\n      })\n    },\n    getPropScale() {\n      const display = this.client.getDisplay()\n      if (!display) {\n        return\n      }\n      // Calculate scale to fit screen\n      const minScale = Math.min(\n        window.innerWidth / Math.max(display.getWidth(), 1),\n        window.innerHeight / Math.max(display.getHeight(), 1)\n      )\n      return minScale\n    },\n\n    updateDisplayScale() {\n      const display = this.client.getDisplay()\n      if (!display) {\n        return\n      }\n\n      const scale = this.getPropScale()\n      if (scale === this.scale) {\n        return\n      }\n      this.scale = scale\n      this.display.scale(scale)\n      this.displayWidth = display.getWidth() * scale\n      this.displayHeight = display.getHeight() * scale\n    },\n\n    debounce(fn, wait) {\n      let timeout = null\n      return function() {\n        if (timeout !== null) {\n          clearTimeout(timeout)\n        }\n        timeout = setTimeout(fn, wait)\n      }\n    },\n\n    onWindowResize() {\n      // 监听 window display的变化\n      if (this.client !== null) {\n        this.updateDisplayScale()\n        // 这里不应该发过去，监控方，不能改变\n        // this.client.sendSize(optimalWidth, optimalHeight)\n      }\n    },\n\n    onClientConnected() {\n      this.onWindowResize()\n      setTimeout(() => {\n        window.addEventListener('resize', this.debounce(this.onWindowResize.bind(this), 300))\n      }, 500)\n    },\n\n    displayResize(width, height) {\n      // 监听guacamole display的变化\n      this.$log.debug('Display resize: ', width, height)\n      const scale = this.getPropScale()\n      this.display.scale(scale)\n      this.displayWidth = width * scale\n      this.displayHeight = height * scale\n    },\n\n    clientStateChanged(clientState) {\n      switch (clientState) {\n        // Idle\n        case 0:\n          this.clientState = 'IDLE'\n          this.$log.debug('clientState, IDLE')\n          break\n\n          // Ignore \"connecting\" state\n        case 1: // Connecting\n          this.clientState = 'Connecting'\n          this.$log.debug('clientState, Connecting')\n          break\n\n          // Connected + waiting\n        case 2:\n          this.clientState = 'Connected + waiting'\n          this.$log.debug('clientState, Connected + waiting')\n          break\n\n          // Connected\n        case 3:\n          this.clientState = 'Connected'\n          this.$log.debug('clientState, Connected ')\n          this.loading = false\n          // Send any clipboard data already provided\n          // if (managedClient.clipboardData)\n          //     ManagedClient.setClipboard(managedClient, managedClient.clipboardData);\n          //\n          // Begin streaming audio input if possible\n          var AUDIO_INPUT_MIMETYPE = 'audio/L16;rate=44100,channels=2'\n          var requestAudioStream = function requestAudioStream(client) {\n            // Create new audio stream, associating it with an AudioRecorder\n            const stream = client.createAudioStream(AUDIO_INPUT_MIMETYPE)\n            const recorder = Guacamole.AudioRecorder.getInstance(stream, AUDIO_INPUT_MIMETYPE)\n\n            // If creation of the AudioRecorder failed, simply end the stream\n            // eslint-disable-next-line brace-style\n            if (!recorder) { stream.sendEnd() }\n            // Otherwise, ensure that another audio stream is created after this\n            // audio stream is closed\n            else { recorder.onclose = requestAudioStream.bind(this, client) }\n          }\n          requestAudioStream(this.client)\n          this.onClientConnected()\n          break\n\n          // Update history when disconnecting\n        case 4: // Disconnecting\n        case 5: // Disconnected\n          this.clientState = 'Disconnecting'\n          this.$log.debug('clientState, Disconnected ')\n          // this.closeDisplay('clientState Disconnecting')\n          var display = document.getElementById('display')\n          display.innerHTML = ''\n          break\n      }\n    },\n    clientOnErr(status) {\n      this.loading = false\n      this.closeDisplay(status)\n    },\n    closeDisplay(status) {\n      this.$log.debug(status, i18n.locale)\n      const code = status.code\n      let msg = status.message\n      msg = ErrorStatusCodes[code] ? this.$t(ErrorStatusCodes[code]) : this.$t(ConvertGuacamoleError(status.message))\n      this.$alert(msg, this.$t('ErrTitle'), {\n        confirmButtonText: this.$t('OK'),\n        callback: action => {\n          const display = document.getElementById('display')\n          if (this.client) {\n            // display.removeChild(this.client.getDisplay().getElement())\n            display.innerHTML = ''\n          }\n        }\n      })\n    },\n    connectGuacamole(connectionParams, wsURL) {\n      const display = document.getElementById('display')\n      const tunnel = new Guacamole.WebSocketTunnel(wsURL)\n      const client = new Guacamole.Client(tunnel)\n      const vm = this\n      tunnel.receiveTimeout = 60 * 1000\n      tunnel.onerror = function tunnelError(status) {\n        vm.$log.debug('tunnelError ', status)\n        display.innerHTML = ''\n      }\n      tunnel.onuuid = function tunnelAssignedUUID(uuid) {\n        vm.$log.debug('tunnelAssignedUUID ', uuid)\n        tunnel.uuid = uuid\n      }\n      tunnel.onstatechange = this.onTunnelStateChanged\n      this.client = client\n      this.tunnel = tunnel\n      this.display = this.client.getDisplay()\n      this.display.onresize = this.displayResize\n      display.appendChild(client.getDisplay().getElement())\n      client.onstatechange = this.clientStateChanged\n      client.onerror = this.clientOnErr\n      client.connect(connectionParams)\n\n      window.onunload = function() {\n        client.disconnect()\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n.el-container {\n  margin: 0 auto;\n}\n\n.el-main {\n  padding: 0;\n}\n</style>\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./GuacamoleMonitor.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./GuacamoleMonitor.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./GuacamoleMonitor.vue?vue&type=template&id=997df4aa&scoped=true&\"\nimport script from \"./GuacamoleMonitor.vue?vue&type=script&lang=js&\"\nexport * from \"./GuacamoleMonitor.vue?vue&type=script&lang=js&\"\nimport style0 from \"./GuacamoleMonitor.vue?vue&type=style&index=0&id=997df4aa&prod&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"997df4aa\",\n  null\n  \n)\n\nexport default component.exports","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./GuacamoleMonitor.vue?vue&type=style&index=0&id=997df4aa&prod&scoped=true&lang=css&\""],"sourceRoot":""}